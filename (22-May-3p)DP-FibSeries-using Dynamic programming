       // fibonacci series  DYNAMIC PROGRAMMING 
  /*
  input:
  n=5
  output: 8
  Fibonacci series: 0 1 1 2 3 5 8
  
  Explanation: if n=5 input  left = n-1,   right=n-2
                    fib(5)
                   /
                 fib(4)
               /        \
             fib(3)     fib(2)
           /    \
   1+1   fib(2)   fib(1) return 1
      /     \
    fib(1)    fib(0)
    retutn 1
  */

#include <iostream>
#include <bits/stdc++.h>
using namespace std;

int  dp[1000001];    // dynamic array store all fib nos
  
int  fib(int n)
{
    if(n<=1)             // if n==1 then recursion return n value back track
    {
        return n;      
    }
    if(dp[n]!=-1)
    {
        return dp[n];
    }
    return dp[n]=fib(n-1)+fib(n-2);        // dp[n] stores fib(n-1)+fib(n-2) recursively when n==1 reach back track
    
}

int main()
{
    int n;
    cin>>n;
    
    for(int i=0;i<=n;i++)
    {
        dp[i]=-1;   
    }
    cout<<fib(n)<<endl;
    
    for(int i=0;i<=n;i++)
    {
        cout<<fib(i)<<" ";
    }
    return 0;
}






 
