          // Valid Parentheses
/* Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.

An input string is valid if:

Open brackets must be closed by the same type of brackets.
Open brackets must be closed in the correct order.
Example 1:

Input: s = "()"
Output: true
Example 2:

Input: s = "()[]{}"
Output: true */

// CPP program to check for balanced brackets.
#include <bits/stdc++.h>
using namespace std;
 
// function to check if brackets are balanced
class Solution 
{
    public:
        bool isValid(string expr)
        { 
            stack<char> s;
            char x;
 
        
        for (int i = 0; i < expr.length(); i++)
        {
            if (expr[i] == '(' || expr[i] == '[' || expr[i] == '{')
            {
                // Push the element in the stack
                s.push(expr[i]);
                continue;
            }
 
            if (s.empty())
                return false;
 
            switch (expr[i]) 
            {
                case ')':
             
            // Store the top element in a
                    x = s.top();
                    s.pop();
                    if (x == '{' || x == '[')
                        return false;
                    break;
 
                case '}':
 
            // Store the top element in b
                    x = s.top();
                    s.pop();
                    if (x == '(' || x == '[')
                        return false;
                    break;
 
                case ']':
 
            // Store the top element in c
                    x = s.top();
                    s.pop();
                    if (x == '(' || x == '{')
                        return false;
                    break;
            }
    }
 
    // Check Empty Stack
    return (s.empty());
}
};
 
// Driver code
int main()
{
   Solution ob;   
    int t;
    cin>>t;
    while(t--)
    {
        
        string s;
        cin>>s;
    
        if (ob.isValid(s))
            cout << "true";
        else
            cout << "false";
    }
    return 0;
}
