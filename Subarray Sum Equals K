// MODEL 1

/* continuous subarrays whose sum equals to k(zero) etc
Input: nums = [1,2,3], k = 3
Output: 2 */

#include <bits/stdc++.h>
using namespace std;
int main()
{
  int arr[] = {4, -2, -1, 1, -2, 3, -3};
  int k = 0;
  int n = sizeof(arr) / sizeof(arr[0]);
  int res = 0;
 
  // Calculate all subarrays
  for (int i = 0; i < n; i++)
  {
    int sum = 0;
    for (int j = i; j < n; j++)
    {
      // Calculate required sum
      sum += arr[j];
 
      // Check if sum is equal to
      // required sum
      if (sum == k)
        res++;
    }
  }
  cout << (res) << endl;
}

// MODEL 2:

#include <iostream>
#include<bits/stdc++.h>
using namespace std;

int main() 
{
	int n=7,k=0;
	int arr[n]={4,-2,-1,1,-2,3,-3};
	map<int,int>m;
	int count=0;
	m.insert({0,1});
	int prefix=0;
	for(auto i:arr)
	{
	    prefix+=i;
	   
	    if(m.find(prefix-k)!=m.end())
	    {
	        count+=m[prefix-k];
	    }
	    m[prefix]+=1;
	}
	cout<<count;
	return 0;
}

/* Output:
4 */
